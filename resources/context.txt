import React, { createContext, useState, useContext, ReactNode, ReactElement } from 'react';

// Define the type for the context value
interface ModalContextType {
  isModalOpen: boolean;
  showModal: (content: ReactNode) => void;
  hideModal: () => void;
  modalContent: ReactNode | null;
}

// Create the Modal Context with a default value
const ModalContext = createContext<ModalContextType | undefined>(undefined);

// Create a custom hook to use the Modal Context
export const useModal = (): ModalContextType => {
  const context = useContext(ModalContext);
  if (!context) {
    throw new Error('useModal must be used within a ModalProvider');
  }
  return context;
};

// Define the type for the ModalProvider props
interface ModalProviderProps {
  children: ReactNode;
}

// Create the Modal Provider component
export const ModalProvider = ({ children }: ModalProviderProps): ReactElement => {
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
  const [modalContent, setModalContent] = useState<ReactNode | null>(null);

  const showModal = (content: ReactNode): void => {
    setModalContent(content);
    setIsModalOpen(true);
  };

  const hideModal = (): void => {
    setIsModalOpen(false);
    setModalContent(null);
  };

  return (
    <ModalContext.Provider value={{ isModalOpen, showModal, hideModal, modalContent }}>
      {children}
    </ModalContext.Provider>
  );
};